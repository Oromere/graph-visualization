{"version":3,"sources":["components/forceGraph.module.css","components/forceGraphGenerator.js","components/ForceGraph.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","runForceGraph","container","linksData","nodesData","links","map","d","Object","assign","nodes","select","selectedNode","neighbors","active","node","reduce","link","target","id","push","source","getNeighbors","attr","includes","getNodeColor","color","selectedNodes","nodeId","findIndex","value","isSelected","drag","simulation","d3","on","alphaTarget","restart","fx","x","fy","y","force","strength","width","height","svg","append","zoomWrapper","zoom","transform","call","selectAll","data","join","weight","connections","filter","length","calcRadius","style","label","enter","text","name","destroy","stop","onSelectionChange","updateOnSelect","ForceGraph","selected","containerRef","React","useRef","useState","setHandler","useEffect","destroyFunction","current","ref","className","styles","App","setSelected","isMulti","options","onChange","classNamePrefix","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f8c1f424.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"forceGraph_container__1O84C\",\"node\":\"forceGraph_node__13ywz\"};","import * as d3 from \"d3\";\r\n\r\nexport function runForceGraph(container, linksData, nodesData) {\r\n  const links = linksData.map((d) => Object.assign({}, d));\r\n  const nodes = nodesData.map((d) => Object.assign({}, d));\r\n  const width = 1800;\r\n  const height = 1200;\r\n\r\n  /* HELPER */\r\n  const calcRadius = (id) => {\r\n    // get all links that the given node is part of\r\n    const connections = links.filter(\r\n      (link) => link.target.id === id || link.source.id === id\r\n    );\r\n    if (connections.length > 0) {\r\n      return 10 + connections.length * 2;\r\n    } else {\r\n      return 12;\r\n    }\r\n  };\r\n\r\n  /* filters all direct neighbors of given node */\r\n  const getNeighbors = (node) => {\r\n    return links.reduce(\r\n      (neighbors, link) => {\r\n        // check if node is part of link\r\n        if (link.target.id === node.id) {\r\n          neighbors.push(link.source.id);\r\n        } else if (link.source.id === node.id) {\r\n          neighbors.push(link.target.id);\r\n        }\r\n        return neighbors;\r\n      },\r\n      [node.id]\r\n    );\r\n  };\r\n\r\n  const getNodeColor = (node, neighbors) => {\r\n    if (neighbors.includes(node.id)) {\r\n      return \"#ff6d00\";\r\n    }\r\n    return \"#fff\";\r\n  };\r\n\r\n  /* click handler for nodes to highlight direct neighbors */\r\n  const select = (selectedNode) => {\r\n    let neighbors = [];\r\n    if (selectedNode.active) {\r\n      // deselect\r\n      selectedNode.active = false;\r\n    } else {\r\n      neighbors = getNeighbors(selectedNode);\r\n      selectedNode.active = true;\r\n    }\r\n    // set stroke of all nodes\r\n    node.attr(\"stroke\", (node) => getNodeColor(node, neighbors));\r\n  };\r\n\r\n  const updateOnSelect = (selectedNodes) => {\r\n    node.attr(\"fill\", d => color(d, selectedNodes))\r\n  }\r\n\r\n  /* test if given node is in selectedNodes */\r\n  const isSelected = (nodeId, selectedNodes) => {\r\n    return (selectedNodes.findIndex((node) => node.value === nodeId) !== -1);\r\n  };\r\n\r\n  const color = (node, selectedNodes) => {\r\n    if (isSelected(node.id, selectedNodes)) {\r\n      return \"#18ffff\";\r\n    } else {\r\n      return \"grey\";\r\n    }\r\n  };\r\n\r\n  const drag = (simulation) => {\r\n    const dragStarted = (d) => {\r\n      if (!d3.event.active) simulation.alphaTarget(0.3).restart();\r\n      d.fx = d.x;\r\n      d.fy = d.y;\r\n    };\r\n\r\n    const dragged = (d) => {\r\n      d.fx = d3.event.x;\r\n      d.fy = d3.event.y;\r\n    };\r\n\r\n    const dragEnded = (d) => {\r\n      if (!d3.event.active) simulation.alphaTarget(0);\r\n      d.fx = null;\r\n      d.fy = null;\r\n    };\r\n\r\n    return d3\r\n      .drag()\r\n      .on(\"start\", dragStarted)\r\n      .on(\"drag\", dragged)\r\n      .on(\"end\", dragEnded);\r\n  };\r\n\r\n  const simulation = d3\r\n    .forceSimulation(nodes)\r\n    .force(\r\n      \"link\",\r\n      d3.forceLink(links).id((d) => d.id)\r\n    )\r\n    .force(\"charge\", d3.forceManyBody().strength(-150))\r\n    .force(\"center\", d3.forceCenter(width / 2, height / 2))\r\n    .force(\"x\", d3.forceX())\r\n    .force(\"y\", d3.forceY());\r\n\r\n  const svg = d3\r\n    .select(container)\r\n    .append(\"svg\")\r\n    .attr(\"viewBox\", [0, 0, width, height]);\r\n\r\n  const zoomWrapper = svg.append(\"g\");\r\n  const zoom = d3.zoom().on(\"zoom\", () => {\r\n    zoomWrapper.attr(\"transform\", d3.event.transform);\r\n  });\r\n  svg.call(zoom);\r\n\r\n  const link = zoomWrapper\r\n    .append(\"g\")\r\n    .attr(\"stroke\", \"#999\")\r\n    .attr(\"stroke-opacity\", 0.6)\r\n    .selectAll(\"line\")\r\n    .data(links)\r\n    .join(\"line\")\r\n    .attr(\"stroke-width\", (d) => d.weight);\r\n\r\n  const node = zoomWrapper\r\n    .append(\"g\")\r\n    .attr(\"stroke\", \"#fff\")\r\n    .attr(\"stroke-width\", 2)\r\n    .selectAll(\"circle\")\r\n    .data(nodes)\r\n    .join(\"circle\")\r\n    .attr(\"r\", (d) => calcRadius(d.id))\r\n    .attr(\"fill\", \"grey\")\r\n    .style(\"cursor\", \"pointer\")\r\n    .on(\"click\", select)\r\n    .call(drag(simulation));\r\n\r\n  const label = zoomWrapper\r\n    .append(\"g\")\r\n    .attr(\"class\", \"labels\")\r\n    .selectAll(\"text\")\r\n    .data(nodes)\r\n    .enter()\r\n    .append(\"text\")\r\n    .attr(\"text-anchor\", \"middle\")\r\n    .attr(\"dominant-baseline\", \"central\")\r\n    .style(\"cursor\", \"pointer\")\r\n    .text((d) => {\r\n      return d.name;\r\n    })\r\n    .on(\"click\", select)\r\n    .call(drag(simulation));\r\n\r\n  simulation.on(\"tick\", () => {\r\n    //update link positions\r\n    link\r\n      .attr(\"x1\", (d) => d.source.x)\r\n      .attr(\"y1\", (d) => d.source.y)\r\n      .attr(\"x2\", (d) => d.target.x)\r\n      .attr(\"y2\", (d) => d.target.y);\r\n\r\n    // update node positions\r\n    node.attr(\"cx\", (d) => d.x).attr(\"cy\", (d) => d.y);\r\n\r\n    // update label positions\r\n    label\r\n      .attr(\"x\", (d) => {\r\n        return d.x;\r\n      })\r\n      .attr(\"y\", (d) => {\r\n        return d.y;\r\n      });\r\n  });\r\n\r\n  return {\r\n    destroy: () => {\r\n      simulation.stop();\r\n    },\r\n    nodes: () => {\r\n      return svg.node();\r\n    },\r\n    onSelectionChange: () => {\r\n        return (selectedNodes) => updateOnSelect(selectedNodes)\r\n    }\r\n  };\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { runForceGraph } from \"./forceGraphGenerator\";\r\nimport styles from \"./forceGraph.module.css\";\r\n\r\nexport default function ForceGraph({ linksData, nodesData, selected }) {\r\n  const containerRef = React.useRef(null);\r\n\r\n  const [onSelectionChange, setHandler] = useState(null);\r\n\r\n  React.useEffect(() => {\r\n    let destroyFunction;\r\n\r\n    if (containerRef.current) {\r\n      const { destroy, onSelectionChange } = runForceGraph(\r\n        containerRef.current,\r\n        linksData,\r\n        nodesData,\r\n        selected\r\n      );\r\n      destroyFunction = destroy;\r\n      setHandler(onSelectionChange);\r\n    }\r\n\r\n    return destroyFunction;\r\n  }, []);\r\n\r\n  React.useEffect(() => {\r\n    if (onSelectionChange !== null) {\r\n      const selection = selected || [];\r\n      onSelectionChange(selection);\r\n    }\r\n  }, [selected]);\r\n\r\n  return <div ref={containerRef} className={styles.container} />;\r\n}\r\n","import React, { useState } from \"react\";\nimport ForceGraph from \"./components/ForceGraph.js\";\nimport Select from 'react-select'\nimport data from \"./assets/data.json\";\nimport \"./App.css\";\n\nfunction App() {\n  const [selected, setSelected] = useState([]);\n\n  const selectOptions = () => {\n    return data.nodes.map((node) => ({ label: node.name, value: node.id }));\n  };\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div className=\"title\">Bible Graph</div>\n        <Select\n          isMulti\n          options={selectOptions()}\n          value={selected}\n          onChange={setSelected}\n          className=\"multi-select\"\n          classNamePrefix=\"select\"\n        />\n      </header>\n      <section className=\"Main\">\n        <ForceGraph\n          linksData={data.links}\n          nodesData={data.nodes}\n          selected={selected}\n        />\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}